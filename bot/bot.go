package bot

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/eugenepelipets/window-wash-bot/models"
	"github.com/eugenepelipets/window-wash-bot/storage"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	api *tgbotapi.BotAPI
	db  *storage.Postgres
}

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
func NewBot(db *storage.Postgres) (*Bot, error) {
	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å .env")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot.Debug = true // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ API –≤ –ª–æ–≥–∞—Ö

	log.Printf("‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	return &Bot{api: bot, db: db}, nil
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			if update.Message.IsCommand() {
				b.handleMessage(update.Message)
			} else {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				session := b.getSession(update.Message.Chat.ID)
				switch session.CurrentState {
				case StateWaitingForFloor, StateWaitingForApartment, StateTelegramNick:
					b.handleTextMessage(update.Message)
				default:
					b.sendMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
				}
			}
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessage(msg *tgbotapi.Message) {
	switch {
	case msg.Text == "/start":
		b.handleStart(msg)
	case strings.HasPrefix(msg.Text, "/export"):
		b.handleExport(msg)
	default:
		b.sendMessage(msg.Chat.ID, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É ü§î")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
func (b *Bot) handleStart(msg *tgbotapi.Message) {
	user := models.User{
		TelegramID: msg.Chat.ID,
		UserName:   msg.From.UserName,
		FirstName:  msg.From.FirstName,
		LastName:   msg.From.LastName,
	}

	err := b.db.SaveUser(user)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
	replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "new_order"),
		),
	)
	b.sendMessage(msg.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π–∫—É –æ–∫–æ–Ω –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëá", replyMarkup)
}

func (b *Bot) sendMessage(chatID int64, text string, replyMarkup ...tgbotapi.InlineKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	if len(replyMarkup) > 0 {
		msg.ReplyMarkup = replyMarkup[0]
	}
	if _, err := b.api.Send(msg); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (b *Bot) sendMainMenu(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
	msg.ReplyMarkup = createMainMenuKeyboard()
	b.api.Send(msg)
}

func (b *Bot) sendEntranceKeyboard(chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—ä–µ–∑–¥:")
	msg.ReplyMarkup = createEntranceKeyboard()
	b.api.Send(msg)
}

func (b *Bot) notifyAdminAboutDuplicate(chatID int64, order models.Order) {
	adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_TELEGRAM_ID"), 10, 64)
	if adminID == 0 {
		return
	}

	msgText := fmt.Sprintf(
		"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–∫–∞–∑!\n\n"+
			"–ü–æ–¥—ä–µ–∑–¥: %d\n–≠—Ç–∞–∂: %d\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: %s\n"+
			"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @%s (%d)\n\n"+
			"–ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, —ç—Ç–æ—Ç - –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–∏.",
		order.Entrance, order.Floor, order.Apartment,
		order.User.UserName, order.User.TelegramID)

	msg := tgbotapi.NewMessage(adminID, msgText)
	b.api.Send(msg)
}
