name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  provision-server:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup fresh Ubuntu server
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          # 1. Обновление системы
          sudo apt update && sudo apt upgrade -y

          # 2. Установка зависимостей
          sudo apt install -y build-essential gcc git

          # 3. Настройка swap (если нет)
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 1G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
          fi

          # 4. Права для deploy (NOPASSWD)
          echo "deploy ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/deploy
          sudo chmod 440 /etc/sudoers.d/deploy

          # 5. Установка PostgreSQL
          sudo apt install -y postgresql postgresql-contrib

          # 6. Создание пользователя БД
          sudo -u postgres psql -c "CREATE USER windowwash WITH PASSWORD '${{ secrets.DB_PASSWORD }}';" || true
          sudo -u postgres psql -c "CREATE DATABASE windowwash OWNER windowwash;" || true

          # 7. Настройка аутентификации
          sudo tee -a /etc/postgresql/*/main/pg_hba.conf << "PG_HBA_EOF"
          # Window Wash Bot Access
          host    windowwash    windowwash    127.0.0.1/32    md5
          local   windowwash    windowwash                   md5
          PG_HBA_EOF

          sudo systemctl restart postgresql

          # 8. Установка Go
          wget https://go.dev/dl/go1.24.0.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.24.0.linux-amd64.tar.gz
          rm go1.24.0.linux-amd64.tar.gz
          echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
          source ~/.bashrc
          EOF

  deploy:
    needs: provision-server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          # 1. Клонирование кода
          mkdir -p /var/www/window-wash-bot
          cd /var/www/window-wash-bot
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch --depth 1 origin main
          git reset --hard FETCH_HEAD

          # 2. Настройка .env
          cat > .env << "ENV_EOF"
          DATABASE_URL=postgres://windowwash:${{ secrets.DB_PASSWORD }}@localhost:5432/windowwash?sslmode=disable
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          ENV_EOF
          chmod 600 .env

          # 3. Сборка приложения
          export PATH=$PATH:/usr/local/go/bin
          go mod tidy
          go build -o telebot .

          # 4. Systemd сервис
          sudo tee /etc/systemd/system/window-wash-bot.service << "SERVICE_EOF"
          [Unit]
          Description=Window Wash Telegram Bot
          After=network.target postgresql.service
          
          [Service]
          User=deploy
          Group=deploy
          WorkingDirectory=/var/www/window-wash-bot
          EnvironmentFile=/var/www/window-wash-bot/.env
          ExecStart=/var/www/window-wash-bot/telebot
          Restart=always
          RestartSec=5
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

          sudo systemctl daemon-reload
          sudo systemctl enable window-wash-bot
          sudo systemctl restart window-wash-bot
          EOF

      - name: Verify deployment
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          sleep 5
          if ! systemctl is-active window-wash-bot; then
            journalctl -u window-wash-bot -n 50 --no-pager
            exit 1
          fi
          echo "✅ Бот успешно запущен!"
          EOF