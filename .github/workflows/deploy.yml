name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  server-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Basic server setup
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          # Обновление системы
          # Настройка автоматического разрешения конфликтов
          echo 'Dpkg::Options {
          "--force-confdef";
          "--force-confold";
          }' | sudo tee /etc/apt/apt.conf.d/local

          # Явно запрещаем major-апгрейд
          sudo sed -i 's/Prompt=lts/Prompt=never/' /etc/update-manager/release-upgrades
  
          # Обновление только security-пакетов (без предложения апгрейда ОС)
          sudo apt update && sudo DEBIAN_FRONTEND=noninteractive apt-get -y \
          -o Dpkg::Options::="--force-confdef" \
          -o Dpkg::Options::="--force-confold" \
          --only-upgrade install $(apt list --upgradable 2>/dev/null | grep -v Listing | grep security | cut -d/ -f1)

          # Установка базовых зависимостей
          sudo apt install -y build-essential gcc

          # Настройка swap
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 1G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
            echo "Swap file создан"
          else
            echo "Swap file уже существует"
          fi

          # Настройка прав для пользователя deploy
          echo "Настройка sudo прав для пользователя deploy..."
          if [ ! -f /etc/sudoers.d/deploy ]; then
            echo "deploy ALL=(ALL) NOPASSWD: ALL" | sudo tee /etc/sudoers.d/deploy
            sudo chmod 440 /etc/sudoers.d/deploy
            echo "Права для deploy настроены"
          else
            echo "Права для deploy уже настроены"
          fi

          # Настройка пользователя PostgreSQL
          echo "Настройка пользователя БД..."
          sudo -u postgres createuser --superuser windowwash || true
          sudo -u postgres psql -c "ALTER USER windowwash WITH PASSWORD '${{ secrets.DB_PASSWORD }}';" || true
          EOF

  setup-database:
    needs: server-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Configure PostgreSQL
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          # Проверяем, установлен ли PostgreSQL
          if ! command -v psql &> /dev/null; then
            echo "Установка PostgreSQL..."
            sudo apt update
            sudo apt install -y postgresql postgresql-contrib
          fi

          # Создаем пользователя и БД (запускаем от postgres)
          sudo -u postgres psql -c "CREATE USER windowwash WITH PASSWORD '${{ secrets.DB_PASSWORD }}';" || true
          sudo -u postgres psql -c "CREATE DATABASE windowwash OWNER windowwash;" || true

          # Настраиваем аутентификацию
          echo "Настройка pg_hba.conf..."
          sudo bash -c 'echo "host    windowwash    windowwash    127.0.0.1/32    md5" >> /etc/postgresql/*/main/pg_hba.conf'
          sudo bash -c 'echo "local   windowwash    windowwash                   md5" >> /etc/postgresql/*/main/pg_hba.conf'
          
          # Перезапускаем PostgreSQL
          sudo systemctl restart postgresql

          # Проверяем подключение
          PGPASSWORD='${{ secrets.DB_PASSWORD }}' psql -U windowwash -d windowwash -h 127.0.0.1 -c "SELECT 1" || exit 1
          EOF

      - name: Apply database schema
        run: |
          scp schema.sql deploy@${{ secrets.SSH_HOST }}:/tmp/schema.sql
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          PGPASSWORD='${{ secrets.DB_PASSWORD }}' psql -U windowwash -d windowwash -h 127.0.0.1 -f /tmp/schema.sql
          rm /tmp/schema.sql
          EOF

  deploy:
    needs: setup-database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Install prerequisites
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          # Установка необходимых пакетов
          sudo apt update
          sudo apt install -y git

          # Создание директории с правильными правами
          sudo mkdir -p /var/www/window-wash-bot
          sudo chown -R deploy:deploy /var/www/window-wash-bot
          EOF

      - name: Deploy application
        run: |
          # Копируем код на сервер
          rsync -avz --delete --exclude='.git' ./ deploy@${{ secrets.SSH_HOST }}:/var/www/window-wash-bot/

          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          cd /var/www/window-wash-bot

          # Создаем .env файл
          cat > .env << "ENV_EOF"
          DATABASE_URL=postgres://windowwash:${{ secrets.DB_PASSWORD }}@localhost:5432/windowwash?sslmode=disable
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
          ENV_EOF
          chmod 600 .env

          # Устанавливаем Go (если ещё не установлен)
          if ! command -v go &> /dev/null; then
            echo "Установка Go..."
            wget https://go.dev/dl/go1.24.0.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go1.24.0.linux-amd64.tar.gz
            rm go1.24.0.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            source ~/.bashrc
          fi

          # Добавляем Go в PATH для текущей сессии
          export PATH=$PATH:/usr/local/go/bin

          # Собираем приложение
          go mod tidy
          go build -o telebot .

          # Настраиваем systemd сервис
          sudo bash -c 'cat > /etc/systemd/system/window-wash-bot.service << "SERVICE_EOF"
          [Unit]
          Description=Window Wash Telegram Bot
          After=network.target postgresql.service

          [Service]
          User=deploy
          Group=deploy
          WorkingDirectory=/var/www/window-wash-bot
          EnvironmentFile=/var/www/window-wash-bot/.env
          ExecStart=/var/www/window-wash-bot/telebot
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF'

          sudo systemctl daemon-reload
          sudo systemctl enable window-wash-bot
          sudo systemctl restart window-wash-bot
          EOF

      - name: Verify deployment
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          sleep 5
          if ! systemctl is-active --quiet window-wash-bot; then
            journalctl -u window-wash-bot -n 50 --no-pager
            exit 1
          fi
          echo "✅ Сервис успешно запущен"
          EOF