name: Deploy to Production

on:
  push:
    branches: [main]

env:
  APP_DIR: /var/www/window-wash-bot
  GO_VERSION: 1.24.0
  SWAP_SIZE: 1G

jobs:
  server-setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Basic server setup
        run: |
          ssh root@${{ secrets.SSH_HOST }} "APP_DIR=${{ env.APP_DIR }} SWAP_SIZE=${{ env.SWAP_SIZE }} bash -s" << 'EOF'
          #!/bin/bash
          set -e
          
          # Создание пользователя deploy
          if ! id -u deploy >/dev/null 2>&1; then
            adduser --disabled-password --gecos "" deploy
            usermod -aG sudo deploy
            mkdir -p /home/deploy/.ssh
            echo "${{ secrets.DEPLOY_PUBLIC_KEY }}" > /home/deploy/.ssh/authorized_keys
            chown -R deploy:deploy /home/deploy/.ssh
            chmod 700 /home/deploy/.ssh
            chmod 600 /home/deploy/.ssh/authorized_keys
            echo "deploy ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/deploy
            chmod 440 /etc/sudoers.d/deploy
          fi

          # Обновление системы и установка зависимостей
          export DEBIAN_FRONTEND=noninteractive
          apt-get update -y && apt-get upgrade -y
          apt-get install -y build-essential git curl ufw

          # Настройка swap
          if [ ! -f /swapfile ]; then
            if ! fallocate -l $SWAP_SIZE /swapfile 2>/dev/null; then
              dd if=/dev/zero of=/swapfile bs=1M count=$((${SWAP_SIZE//[!0-9]/}*1024)) status=progress
            fi
            chmod 600 /swapfile
            mkswap /swapfile
            swapon /swapfile
            echo '/swapfile none swap sw 0 0' >> /etc/fstab
          fi

          # Настройка firewall
          ufw allow OpenSSH
          ufw --force enable

          # Создание директории приложения
          mkdir -p "$APP_DIR"
          chown deploy:deploy "$APP_DIR"
          EOF

  setup-database:
    needs: server-setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install and configure PostgreSQL
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          
          if ! command -v psql &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y postgresql postgresql-contrib
          fi

          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='windowwash'" | grep -q 1 || \
          sudo -u postgres psql -c "CREATE USER windowwash WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"

          sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='windowwash'" | grep -q 1 || \
          sudo -u postgres psql -c "CREATE DATABASE windowwash OWNER windowwash;"

          if ! grep -q "host windowwash windowwash 127.0.0.1/32 md5" /etc/postgresql/*/main/pg_hba.conf; then
            echo "host windowwash windowwash 127.0.0.1/32 md5" | sudo tee -a /etc/postgresql/*/main/pg_hba.conf
            sudo systemctl restart postgresql
          fi
          EOF

      - name: Apply database schema
        run: |
          rsync -avz schema.sql deploy@${{ secrets.SSH_HOST }}:/tmp/schema.sql
          ssh deploy@${{ secrets.SSH_HOST }} "PGPASSWORD='${{ secrets.DB_PASSWORD }}' psql -U windowwash -d windowwash -h 127.0.0.1 -f /tmp/schema.sql && rm /tmp/schema.sql"

  deploy:
    needs: setup-database
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy application
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" --delete --exclude={'.git','.github','logs'} ./ deploy@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/
          ssh deploy@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd ${{ env.APP_DIR }}

          printf "DATABASE_URL=postgres://windowwash:%s@localhost:5432/windowwash?sslmode=disable\nTELEGRAM_TOKEN=%s\n" "${{ secrets.DB_PASSWORD }}" "${{ secrets.TELEGRAM_TOKEN }}" > .env
          chmod 600 .env

          if ! go version | grep -q "${{ env.GO_VERSION }}"; then
            curl -OL https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo tar -C /usr/local -xzf go${{ env.GO_VERSION }}.linux-amd64.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
            source ~/.bashrc
            rm go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          fi
          
          export PATH=$PATH:/usr/local/go/bin
          go mod tidy
          go build -o telebot .

          sudo systemctl daemon-reload
          sudo systemctl enable window-wash-bot
          sudo systemctl restart window-wash-bot
          EOF

      - name: Verify deployment
        run: |
          ssh deploy@${{ secrets.SSH_HOST }} "systemctl is-active --quiet window-wash-bot || (journalctl -u window-wash-bot -n 50 --no-pager && exit 1)"
          echo "✅ Сервис успешно запущен"